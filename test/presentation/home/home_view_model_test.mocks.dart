// Mocks generated by Mockito 5.4.2 from annotations
// in plant_ui/test/presentation/home/home_view_model_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:estado/state/observer.dart' as _i5;
import 'package:estado/state/state.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:plant_ui/domain/plant_repository.dart' as _i3;
import 'package:plant_ui/model/plants.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePlants_0 extends _i1.SmartFake implements _i2.Plants {
  _FakePlants_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PlantRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlantRepository extends _i1.Mock implements _i3.PlantRepository {
  MockPlantRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.Plant>> getPlants() => (super.noSuchMethod(
        Invocation.method(
          #getPlants,
          [],
        ),
        returnValue: _i4.Future<List<_i2.Plant>>.value(<_i2.Plant>[]),
      ) as _i4.Future<List<_i2.Plant>>);

  @override
  _i4.Future<_i2.Plants> getDetails(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getDetails,
          [id],
        ),
        returnValue: _i4.Future<_i2.Plants>.value(_FakePlants_0(
          this,
          Invocation.method(
            #getDetails,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Plants>);
}

/// A class which mocks [EventObserver].
///
/// See the documentation for Mockito's code generation for more information.
class MockEventObserver extends _i1.Mock implements _i5.EventObserver {
  MockEventObserver() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Map<String, Function> getHandleStateFunctions() => (super.noSuchMethod(
        Invocation.method(
          #getHandleStateFunctions,
          [],
        ),
        returnValue: <String, Function>{},
      ) as Map<String, Function>);

  @override
  void notify(_i6.ViewEvent? state) => super.noSuchMethod(
        Invocation.method(
          #notify,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void cleanUp() => super.noSuchMethod(
        Invocation.method(
          #cleanUp,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
